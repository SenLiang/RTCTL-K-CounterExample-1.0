-- Model for the PCI Bus protocol
MODULE arb_bank_2in(req0, req1, policy, granted, change_now)
VAR last: {0, 1};
DEFINE
  grant := case
             policy = FP:
               case
                 req0: 0;
                 req1: 1;
                 TRUE :    idle;
               esac;
             policy = RR:
               case
                 last = 0:
                   case
                     req1: 1;
                     req0: 0;
                     TRUE :    idle;
                   esac;
                 last = 1:
                   case
                     req0: 0;
                     req1: 1;
                     TRUE :    idle;
                   esac;
               esac;
           esac;

ASSIGN
  init(last) := 0;
  next(last) := case
                  !granted | !change_now: last;
                  grant = 0: 0;
                  grant = 1: 1;
                  TRUE  :       last;
                esac;

MODULE arb_bank_3in(req0, req1, req2, policy, change_now)
VAR last: {0, 1, 2};
DEFINE
  grant := case
             policy = FP:
               case
                 req0: 0;
                 req1: 1;
                 req2: 2;
                 TRUE :    idle;
               esac;
             policy = RR:
               case
                 last = 0:
                   case
                     req1: 1;
                     req2: 2;
                     req0: 0;
                     TRUE :    idle;
                   esac;
                 last = 1:
                   case
                     req2: 2;
                     req0: 0;
                     req1: 1;
                     TRUE :    idle;
                   esac;
                 last = 2:
                   case
                     req0: 0;
                     req1: 1;
                     req2: 2;
                     TRUE :    idle;
                   esac;
               esac;
           esac;
ASSIGN
  init(last) := 0;
  next(last) := case
                  !change_now: last;
                  grant = 0: 0;
                  grant = 1: 1;
                  grant = 2: 2;
                  TRUE :     last;
                esac;

MODULE arbiter(req0, req1, req2, req3, req4, req5, b_frame_switch)

VAR
    policy0: {FP, RR};
    policy1: {FP, RR};
    policy2: {FP, RR};
    policy3: {FP, RR};

    bank0: arb_bank_2in(req0, req1, policy0, (bank2.grant = 0), change_now);
    bank1: arb_bank_2in(req2, req3, policy1, (bank2.grant = 1), change_now);
    bank2: arb_bank_3in(reqbank0, reqbank1, reqbank3, policy2, change_now);
    bank3: arb_bank_2in(req4, req5, policy3, (bank2.grant = 2), change_now);
    grant: {0, 1, 2, 3, 4, 5, idle};

DEFINE
  reqbank0 := !(bank0.grant = idle);
  reqbank1 := !(bank1.grant = idle);
  reqbank3 := !(bank3.grant = idle);
  change_now := !(!b_frame_switch & grant != idle);

ASSIGN
  init(grant) := idle;
  next(grant) := 
           case
             !b_frame_switch & grant != idle: grant;
             bank2.grant = idle: idle;
             bank2.grant = 0:
               case
                 bank0.grant = 0: 0;
                 TRUE :          1;
               esac;
             bank2.grant = 1:
               case
                 bank1.grant = 0: 2;
                 TRUE :          3;
               esac;
             bank2.grant = 2:
               case
                 bank3.grant = 0: 4;
                 TRUE :          5;
               esac;
           esac;

  next(policy0) := policy0;
  next(policy1) := policy1;
  next(policy2) := policy2;
  next(policy3) := policy3;


MODULE bus_master(-- in parameter:
                  id, b_frame_switch, abort, abort_count,
                  -- values received from the bus:
                  b_gnt, b_c_bd, b_frame, b_irdy, b_trdy)
VAR
  req: boolean;
  state: {idle, address, data};
  _count: 0..15;                            -- counts how many cache lines
                                           -- will be sent (or received).
  c_bd: {IDLE, MEM_READ, MEM_WRITE};
  irdy: boolean;
  trdy: boolean;
  issue_next: boolean;  -- true when a transaction will be requested in the
                        -- next state (if not in progress already);
--  abort_counter: 0..15;
DEFINE
  ad    := 0;

  bus_idle := !b_frame & !b_irdy;
  start_transaction := b_gnt & bus_idle;
  end_transaction   := (state = data) & (_count = 0);
  frame := (state = address) | ((state = data) & (_count > 0));

ASSIGN
  init(req) := FALSE;
  next(req) := case
                 frame & abort: TRUE;
                 !req: case
                         issue_next: TRUE;
                        !issue_next: FALSE;
                       esac;
                 req: case
                        b_gnt:  FALSE;
                        TRUE :      TRUE;
                      esac;
               esac;

  init(state) := idle;
  next(state) := case
                   abort: idle;
                   state = idle:
                     case
                       !start_transaction: idle;
                       TRUE : address;         -- just been granted the bus,
                                           -- start a new transaction.
                     esac;
                   state = address: data;
                   state = data:
                     case
                       _count = 0: idle;    -- count to see if all data
                       TRUE :         data;    -- has been sent.
                     esac;
                 esac;

  init(_count) := 0;
  next(_count) := case
                   abort: 0;
                   start_transaction: { 1,  2,  3,  4,  5,  6,  7,
                                        8,  9, 10, 11, 12, 13, 14, 15};
                   end_transaction: 0;
                   !(state = data): _count;    -- sends data only in data state
                   !b_trdy: _count;          -- and only if target is ready
                   _count > 0: _count - 1;
                   TRUE : _count;
                 esac;

  init(c_bd) := IDLE;
  next(c_bd) := case
                  abort: IDLE;
                  start_transaction: {MEM_READ, MEM_WRITE};
                           -- Actual values are:{IO_READ, IO_WRITE, MEM_READ,
                           -- MEM_WRITE, MEM_READ_MULT, MEM_READ_LINE,
                           -- MEM_WRITE_INV};
                  end_transaction: IDLE;
                  TRUE : c_bd;
                esac;

  init(irdy) := FALSE;
  next(irdy) := case
                  abort: FALSE;
                  state = address: TRUE;
                  end_transaction: FALSE;
                  TRUE : irdy;
                esac;

  init(trdy) := FALSE;
  next(trdy) := case
                  abort: FALSE;
                  state != idle: FALSE;            -- we don't assert trdy
                                               -- if we are the master.
                  !trdy: case                  -- conditions for assertion
                           b_c_bd = MEM_READ & b_irdy: TRUE;
                                               -- the condition above asserts
                                               -- one cycle after irdy,
                                               -- creating a turnaround cycle
                           b_c_bd = MEM_WRITE & b_frame: TRUE;
                                               -- the condition above asserts
                                               -- at the same cycle at irdy,
                                               -- no turnaround cycle
                           TRUE : FALSE;
                         esac;
                  trdy: case                   -- conditions for deassertion
                           b_frame: TRUE;
                           TRUE :     FALSE;           -- reset at end of trans.
                         esac;
                esac;

MODULE bus_master_null(-- in parameters:
                  id, b_frame_switch, abort, abort_count,
                  -- values received from the bus:
                  b_gnt, b_c_bd, b_frame, b_irdy, b_trdy)
DEFINE
  c_bd  := 0;
  ad    := 0;
  frame := FALSE;
  irdy  := FALSE;
  trdy  := FALSE;

  req   := FALSE;
-------------------------------------------------------------------------
MODULE main

VAR
    arb: arbiter(isa_bridge.req, scsi_ctrl.req, vga_ctrl.req, slot0.req, processor.req, slot1.req, b_frame_switch);

    isa_bridge: bus_master(0, b_frame_switch, abort, abort_count,
                           (arb.grant = 0), b_c_bd, b_frame, b_irdy, b_trdy);
    scsi_ctrl:  bus_master(1, b_frame_switch, abort, abort_count,
                           (arb.grant = 1), b_c_bd, b_frame, b_irdy, b_trdy);
    vga_ctrl:   bus_master(2, b_frame_switch, abort, abort_count,
                           (arb.grant = 2), b_c_bd, b_frame, b_irdy, b_trdy);
    slot0:      bus_master_null(3, b_frame_switch, abort, abort_count,
                                (arb.grant = 3), b_c_bd, b_frame, b_irdy, b_trdy);
    processor:  bus_master(4, b_frame_switch, abort, abort_count,
                           (arb.grant = 4), b_c_bd, b_frame, b_irdy, b_trdy);
    slot1:      bus_master_null(5, b_frame_switch, abort, abort_count,
                                (arb.grant = 5), b_c_bd, b_frame, b_irdy, b_trdy);

  -- Bus signals
DEFINE
  b_frame := isa_bridge.frame | scsi_ctrl.frame | vga_ctrl.frame | slot0.frame | processor.frame | slot1.frame;
  b_irdy  := isa_bridge.irdy | scsi_ctrl.irdy | vga_ctrl.irdy | slot0.irdy | processor.irdy | slot1.irdy;
  b_trdy  := isa_bridge.trdy | scsi_ctrl.trdy | vga_ctrl.trdy | slot0.trdy | processor.trdy | slot1.trdy;
  b_c_bd  := case
               isa_bridge.frame: isa_bridge.c_bd;
               scsi_ctrl.frame: scsi_ctrl.c_bd;
               vga_ctrl.frame: vga_ctrl.c_bd;
               slot0.frame: slot0.c_bd;
               processor.frame: processor.c_bd;
               TRUE :      slot1.c_bd;
             esac;

  bus_idle := !b_frame & !b_irdy;
VAR
  b_frame_old: boolean;
ASSIGN
  init(b_frame_old) := FALSE;
  next(b_frame_old) := b_frame;
DEFINE
  b_frame_switch := b_frame & !b_frame_old;

VAR
  abort_count: 0..3;
  abort_random: boolean;
ASSIGN
  init(abort_count) := 0;
  next(abort_count) := case
                         abort:
                           case
                             abort_count = 3: 3;
                             TRUE : abort_count + 1;
                           esac;
                         TRUE : abort_count;
                       esac;
                         
DEFINE
  abort := abort_random & b_frame;

--TRANS (abort_count = 0)
TRANS (abort_count = 0 | abort_count = 1)
--TRANS (abort_count = 0 | abort_count = 1 | abort_count = 2)
--SPEC AG !abort
--SPEC EG abort_count = 0
--SPEC AG abort_count != 3
--SPEC AG(scsi_ctrl.req -> A[scsi_ctrl.req U (arb.grant = 1 | isa_bridge.req)])
--SPEC AG(vga_ctrl.req -> A[vga_ctrl.req U (arb.grant = 2 | isa_bridge.req | scsi_ctrl.req)])
--SPEC AG(slot0.req -> A[slot0.req U (arb.grant = 3 | isa_bridge.req | scsi_ctrl.req | vga_ctrl.req)])
--SPEC AG(processor.req -> A[processor.req U (arb.grant = 4 | isa_bridge.req | scsi_ctrl.req | vga_ctrl.req | slot0.req)])
--SPEC AG(slot1.req -> A[slot1.req U (arb.grant = 5 | isa_bridge.req | scsi_ctrl.req | vga_ctrl.req | slot0.req | slot1.req)])
--SPEC AG((processor.start_transaction) -> AG !(scsi_ctrl.end_transaction))
--SPEC AG (isa_bridge.start_transaction -> !E[!isa_bridge.end_transaction BU 132..132 isa_bridge.end_transaction])

















